module core

enum Error {
    Ok = 0,
    PacketNotFound = 1,
    InvalidBerLength = 2,
    UnexpectedEndOfBerStream = 3,
    NotEnoughSpace = 4,
    NotEnoughData = 5,
    InvalidSize = 6,
    InvalidDataHeader = 7,
    InvalidPacketHeader = 8,
    InvalidDataSize = 9,
    InvalidAddressType = 10,
    InvalidReservedFieldValue = 11,
    InvalidStreamType = 12,
    InvalidErrorControlType = 13,
    InvalidWindowSize = 14,
    InvalidChecksum = 15,
    InvalidSequenceCounter = 16,
    InvalidTimeValue = 17,
    EventIsDenied = 18,
    InvalidTimeType = 19,

    InvalidComponentId = 20,
    InvalidCommandId = 21,
    InvalidMessageId = 22,
    InvalidValue = 23,
}

struct Reader {
    current: *const u8,
    start: *const u8,
    end: *const u8,
}

impl Reader {
    fn init(&mut self, data: *mut void, size: usize)
    fn isAtEnd(&self) -> bool
    fn currentPtr(&self) -> *const u8
    fn readableSize(&self) -> usize
    fn skip(&mut self, size: usize)
    fn read(&mut self, dest: *mut void, size: usize)

    fn peekU8(&self) -> u8
    fn peekU16Be(&self) -> u16

    fn readU8(&mut self) -> u8

    fn readU16Be(&mut self) -> u16
    fn readU32Be(&mut self) -> u32
    fn readU64Be(&mut self) -> u64

    fn readU16Le(&mut self) -> u16
    fn readU32Le(&mut self) -> u32
    fn readU64Le(&mut self) -> u64

    fn readVaruint(&mut self, dest: *mut varuint) -> Error

    fn slice(&mut self, length: usize, dest: *mut Reader)
    fn sliceToEnd(&mut self, dest: *mut Reader)
}

struct Writer {
    current: *mut u8,
    start: *mut u8,
    end: *const u8,
}

impl Writer {
    fn init(&mut self, dest: *mut void, size: usize)

    fn writeU8(&mut self, value: u8)

    fn writeU16Be(&mut self, value: u16)
    fn writeU32Be(&mut self, value: u32)
    fn writeU64Be(&mut self, value: u64)

    fn writeU16Le(&mut self, value: u16)
    fn writeU32Le(&mut self, value: u32)
    fn writeU64Le(&mut self, value: u64)

    fn writeVaruint(&mut self, value: varuint) -> Error

    fn write(&mut self, src: *const void, size: usize)
    fn skip(&mut self, size: usize)

    fn sliceFromBack(&mut self, length: usize, dest: *mut Writer)
    fn setCurrentPtr(&mut self, ptr: *mut u8)

    fn currentPtr(&self, size: usize) -> *mut u8
    fn isAtEnd(&self) -> bool
    fn writableSize(&self) -> usize
}

variant Time {
    Secs { seconds: u32 },
    SecsMsecs { seconds: u32, milliseconds: u16 },
    SecsUsecs { seconds: u32, microseconds: u32 },
    SecsNsecs { seconds: u32, nanoseconds: u32 },
}

struct Test {
    a1: bool,
    a2: i8,
    a3: i16,
    a4: i32,
    a5: i64,
    a6: u8,
    a7: u16,
    a8: u32,
    a9: u64,
    a10: varint,
    a11: varuint,
    time: Time,
    reader: Reader,
    error: Error,
    arrayOfInts: [i32; 4],
    doubleArrayOfInts: [[i32; 6]; 4],
    tripleArrayOfEnum: [[[Error; 6]; 4]; 99],
    arrayOfTime: [Time; 5],
    a12: &[varuint],
    a13: &Fn(i32) -> i64,
}
